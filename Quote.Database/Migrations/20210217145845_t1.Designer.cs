// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quote.Database;

namespace Quote.Database.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210217145845_t1")]
    partial class t1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Quote.Database.Models.spAccessList", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TT")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("spAccessLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(172),
                            CreateUser = 1,
                            Name = "Create",
                            Status = 1,
                            TT = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(176),
                            CreateUser = 1,
                            Name = "Delete",
                            Status = 1,
                            TT = 0
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(179),
                            CreateUser = 1,
                            Name = "Update",
                            Status = 1,
                            TT = 0
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(181),
                            CreateUser = 1,
                            Name = "View",
                            Status = 1,
                            TT = 0
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.spCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("spCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(8916),
                            CreateUser = 1,
                            Name = "Category 1",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(8920),
                            CreateUser = 1,
                            Name = "Category 2",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.spRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAccess")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("spRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 401, DateTimeKind.Utc).AddTicks(781),
                            CreateUser = 1,
                            Name = "admin",
                            Status = 1,
                            UserAccess = "1,2,3"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 401, DateTimeKind.Utc).AddTicks(1602),
                            CreateUser = 1,
                            Name = "user",
                            Status = 1,
                            UserAccess = "4"
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.spSender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("spSenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(7655),
                            CreateUser = 1,
                            Name = "email",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(7660),
                            CreateUser = 1,
                            Name = "sms",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.tbAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("tbAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(1980),
                            CreateUser = 1,
                            LastName = "Alimov",
                            Name = "Rustam",
                            Patronymic = "Rustam",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(1985),
                            CreateUser = 1,
                            LastName = "Sherali",
                            Name = "Juray",
                            Patronymic = "Ozod",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.tbQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tbQuotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(3755),
                            CreateUser = 1,
                            Status = 1,
                            Text = "Text 1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(3759),
                            CreateUser = 1,
                            Status = 1,
                            Text = "Text 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(3761),
                            CreateUser = 1,
                            Status = 1,
                            Text = "Text 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CategoryId = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(3762),
                            CreateUser = 1,
                            Status = 1,
                            Text = "Text 4"
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.tbSubscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscribeUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("SubscribeUserId");

                    b.ToTable("tbSubscribes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(5457),
                            CreateUser = 1,
                            SenderId = 1,
                            Status = 1,
                            SubscribeUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 407, DateTimeKind.Utc).AddTicks(5463),
                            CreateUser = 1,
                            SenderId = 2,
                            Status = 1,
                            SubscribeUserId = 2
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.tbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(5031),
                            CreateUser = 1,
                            Email = "admin@gmail.com",
                            LastName = "LastName",
                            Name = "Name",
                            Password = "c4ca4238a0b923820dcc509a6f75849b",
                            Patronymic = "Patronymic",
                            RoleId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 17, 14, 58, 44, 406, DateTimeKind.Utc).AddTicks(5801),
                            CreateUser = 1,
                            Email = "user@gmail.com",
                            LastName = "LastName",
                            Name = "Name",
                            Password = "c4ca4238a0b923820dcc509a6f75849b",
                            Patronymic = "Patronymic",
                            RoleId = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Quote.Database.Models.tbQuote", b =>
                {
                    b.HasOne("Quote.Database.Models.tbAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quote.Database.Models.spCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Quote.Database.Models.tbSubscribe", b =>
                {
                    b.HasOne("Quote.Database.Models.spSender", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quote.Database.Models.tbUser", "SubscribeUser")
                        .WithMany()
                        .HasForeignKey("SubscribeUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("SubscribeUser");
                });

            modelBuilder.Entity("Quote.Database.Models.tbUser", b =>
                {
                    b.HasOne("Quote.Database.Models.spRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
